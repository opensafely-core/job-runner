[project]
name = "opensafely-jobrunner"
description = "OpenSAFELY job scheduling and executor"
readme = "README.md"
authors = [{ name = "OpenSAFELY", email = "tech@opensafely.org" }]
license = { file = "LICENSE" }
classifiers = [
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
]
requires-python = ">=3.10"
dependencies = [
    "Django",
    "gunicorn",
    "opensafely-pipeline@https://github.com/opensafely-core/pipeline/archive/refs/tags/v2025.03.06.161237.zip",
    "ruyaml",
    "requests",
    "opentelemetry-exporter-otlp-proto-http",
    "opentelemetry-instrumentation-django",
    "opentelemetry-instrumentation-requests"
]
dynamic = ["version"]

[project.urls]
Home = "https://opensafely.org"
Documentation = "https://docs.opensafely.org"
Source = "https://github.com/opensafely-core/job-runner"

[tool.coverage.run]
branch = true
dynamic_context = "test_function"
source = ["jobrunner"]
omit = [
    "jobrunner/service.py",
    "jobrunner/cli/controller/migrate.py",
    # these are temporary wrappers for backwards compatibility and will be removed soon
    "jobrunner/cli/add_backend_to_flags.py",
    "jobrunner/cli/add_backend_to_job.py",
    "jobrunner/cli/add_job.py",
    "jobrunner/cli/flags.py",
    "jobrunner/cli/migrate.py",
    "jobrunner/cli/prepare_for_reboot.py",
]

[tool.coverage.report]
fail_under = 100
show_missing = true
skip_covered = true
exclude_also = [
    # this indicates that the line should never be hit
    "assert False.*",
    # multiline default case pattern
    "case _:\\n\\s*assert False",
    # this condition is only true when a module is run as a script
    'if __name__ == "__main__":',
    # this indicates that a method should be defined in a subclass
    "raise NotImplementedError",
]


[tool.coverage.html]
show_contexts = true

[tool.ruff.lint]
# See: https://docs.astral.sh/ruff/rules/
extend-select = [
    "A",      # prevent shadowing builtins
    "COM818", # no trailing commas on bare tuples
    "I",      # isort
    "INP",    # no implicit namespace packages
    "UP",     # pyupgrade
    "W",      # pycodestyle warning
]
extend-ignore = [
    "A005", # ignore stdlib-module-shadowing
    "E501", # ignore line length
]
isort.lines-after-imports = 2

[tool.pytest.ini_options]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning:opentelemetry.*:",
    "ignore::DeprecationWarning:pytest_freezegun:17",
    "ignore::DeprecationWarning:pytest_responses:9",
    "ignore:.*dynamic_context.*:pytest_cov.CentralCovContextWarning",
]
DJANGO_SETTINGS_MODULE = "controller_app.settings"

[tool.setuptools.packages.find]
include = ["jobrunner*"]
