# note: this docker-compose file is intended to define the *building* of
# job-runner images, and running them locally in dev, not for running them in
# production
name: job-runner

services:
  prod:
    # image name, both locally and public
    image: job-runner
    build:
      context: ..
      # path relative to context
      dockerfile: docker/Dockerfile
      # the prod stage in the Dockerfile
      target: job-runner-prod
      # should speed up the build in CI, where we have a cold cache
      cache_from:  # should speed up the build in CI, where we have a cold cache
        - ghcr.io/opensafely-core/base-docker
        - ghcr.io/opensafely-core/job-runner
      args:
        # this makes the image work for later cache_from: usage
        - BUILDKIT_INLINE_CACHE=1
        # env vars should be supplied by just/make
        - BUILD_DATE
        - GITREF
    # use dockers builitin PID daemon
    init: true
    # run as the the current user to preserve file permissions
    user: "${DEV_USERID:-1000}:${DEV_GROUPID:-1000}"
    # run with additional group docker (the *hosts* gid for docker)
    group_add: ["${DOCKER_HOST_GROUPID}"]
    # paths are relative to docker-compose.yaml
    volumes:
      # docker control
      - /var/run/docker.sock:/var/run/docker.sock
      # use the default dev workdir
      - ../workdir:/workdir
      # used to avoid ugly uid/gid lookup failures, but not strictly required
      - /etc/group:/etc/group:ro
      - /etc/passwd:/etc/passwd:ro
      # these paths must be absolute on the host, and must be mount to the
      # identical absolute paths inside the container. This allows for
      # job-runner to use the same value for both its own file access, and for
      # what to pass to the host docker as a bindmount source directory, which
      # needs to be on the host.
      # We can potentially fix this by adding an explicit bind mount source configs, if we want to
      - ${MEDIUM_PRIVACY_STORAGE_BASE}:${MEDIUM_PRIVACY_STORAGE_BASE}
      - ${HIGH_PRIVACY_STORAGE_BASE}:${HIGH_PRIVACY_STORAGE_BASE}
    # paths relative to docker-compose.yaml file
    env_file:
      # load jobrunner local dev config
      - ../.env
      # explicitly load local .env after parent dir .env
      - .env
    # ensure WORKDIR environment points to fixed location
    environment:
      # default dev config
      WORKDIR: /workdir
      # force using mounted docker socket
      DOCKER_HOST: unix:///var/run/docker.sock
      # used to enable in CI
      PRIVATE_REPO_TOKEN: ${PRIVATE_REPO_TOKEN:-}

  # main development service
  dev:
    extends:
        service: prod
    image: job-runner-dev
    container_name: job-runner-dev
    build:
      # the dev stage in the Dockerfile
      target: job-runner-dev
    # Some tricks are needed here to be able to run tests when running inside
    # docker, as we need the volumes to be mountable by the host docker. Our
    # pytest fixtures create the directories in /tmp, so we provide a host
    # mounted /tmp to the container, so we can access it from the host as well.
    environment:
      # Tell our test fixture what the root dir is on the host where to point
      # DOCKER_HOST_VOLUME_DIR to for each isolated test
      PYTEST_HOST_TMP: ${PYTEST_HOST_TMP:-/tmp/jobrunner-docker}
    volumes:
      # mount the host provide temp dir as /tmp. Note: this dir must exist
      - ${PYTEST_HOST_TMP:-/tmp/jobrunner-docker}:/tmp
      # mount our current code
      - ..:/app

  # test runner service - uses dev-image with a different command
  test:
    extends:
        service: dev
    container_name: job-runner-test
    # override command
    command: >
      bash -c pytest

  # functional test services - note these intentionally extend prod rather than dev
  test-agent:
    extends:
        service: prod
    command: /app/docker/scripts/agent.sh
    environment:
      WORKDIR: "/tmp/workdir"
      CONTROLLER_TASK_API_ENDPOINT: "http://test-controller:8000/"

  test-controller:
    extends:
        service: prod
    command: /app/docker/scripts/controller.sh
    environment:
      WORKDIR: "/tmp/workdir"
      DJANGO_CONTROLLER_SECRET_KEY: 12345789abcdefghi
      DJANGO_CONTROLLER_ALLOWED_HOSTS: "*"
      DJANGO_DEBUG: "False"
