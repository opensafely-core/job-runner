set dotenv-load := true

export PYTEST_HOST_TMP := "/tmp/jobrunner-docker"

# List available commands
default:
    @{{ just_executable() }} --list --unsorted

build env="dev": tmpdir docker-compose-env
    #!/usr/bin/env bash
    set -eu

    # ensure parent env files exist
    test -f ../.env || cp ../dotenv-sample ../.env

    # enable modern docker build features
    export DOCKER_BUILDKIT=1
    export COMPOSE_DOCKER_CLI_BUILD=1

    # set build args for prod builds
    export BUILD_DATE=$(date -u +'%y-%m-%dT%H:%M:%SZ')
    export GITREF=$(git rev-parse --short HEAD)

    # build the thing
    docker compose build --pull {{ env }}

tmpdir:
    #!/bin/bash
    # We do this in order to ensure that PYTEST_HOST_TMP is owned by the user running the tests
    if test -d $PYTEST_HOST_TMP; then
        rm $PYTEST_HOST_TMP -rf || { echo "Cannot create $PYTEST_HOST_TMP! Is it owned by root? If so, remove."; exit 1; }
    fi
    mkdir $PYTEST_HOST_TMP

docker-compose-env:
    #!/bin/bash
    mkdir -p {medium,high}
    test -f .env && exit 0
    cat <<EOF > .env
    DEV_USERID=$(id -u)
    DEV_GROUPID=$(id -g)
    DOCKER_HOST_GROUPID=$(getent group docker | awk -F: '{print $3}')
    PYTEST_HOST_TMP=$PYTEST_HOST_TMP
    MEDIUM_PRIVACY_STORAGE_BASE=$(realpath $PWD/medium)
    HIGH_PRIVACY_STORAGE_BASE=$(realpath $PWD/high)
    USING_DUMMY_DATA_BACKEND=True
    EOF

# run tests in docker container
test *args: build
    #!/bin/bash
    docker compose run --rm test {{ args }}

functional-test: (build 'prod')
    #!/bin/bash
    export TMP_WORKDIR="$(mktemp -d)"
    container=job-runner-test-controller-service-1
    trap 'rm -rf "$TMP_WORKDIR" && docker compose kill test-controller-web test-controller-service test-agent' EXIT
    docker compose run --rm test-controller-service python3 -m controller.cli.migrate
    docker compose up -d test-controller-service test-controller-web
    docker compose exec test-controller-service python3 -m controller.cli.add_job https://github.com/opensafely/research-template generate_dataset --backend test
    docker compose up -d test-agent
    attempts=""
    # use docker logs rather than docker compose logs, as those will include previous run's logs
    while ! docker logs -n 10 $container |& grep -q "Completed successfully";
    do
        if test "$attempts" = ".........."; then
            docker compose logs test-agent
            docker compose logs test-controller-service
            docker compose logs test-controller-web
            exit 1;
        fi
        attempts="${attempts}."
        echo "waiting..."
        sleep 1
    done
    docker logs -n 10 $container |& grep "Completed successfully"

# run command in dev container
run env="dev" *args="": (build env)
    docker compose run --rm {{ env }} {{ args }}

# exec command in existing dev container
exec *args="bash":
    docker compose exec dev {{ args }}

clean:
    #!/bin/bash
    rm -rf $PYTEST_HOST_TMP .env
    docker image rm job-runner job-runner-dev || true
